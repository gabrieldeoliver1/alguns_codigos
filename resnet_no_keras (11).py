# -*- coding: utf-8 -*-
"""ResNet no Keras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EmO0EgnJfagRNlAM3c4hfXrS2eL1XanJ
"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import GlobalAveragePooling2D, Dense
from tensorflow.keras.applications import ResNet50


def load_train(path):
    train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1/255)
    train_data = train_datagen.flow_from_directory(
        path,
        target_size=(150, 150),
        class_mode='sparse',
        batch_size=16,
        seed=123
    )
    return train_data

def create_model(input_shape=(150, 150, 3)):
    model = Sequential()
    backbone = ResNet50(input_shape=(150, 150, 3), weights='imagenet', include_top=False)
    model.add(backbone)
    model.add(GlobalAveragePooling2D())
    model.add(Dense(12, activation='softmax'))
    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['acc'])
    return model

def train_model(model, train_data, test_data, batch_size=None, epochs=7, steps_per_epoch=None, validation_steps=None):
    if steps_per_epoch is None:
        steps_per_epoch = len(train_data)
    if validation_steps is None:
        validation_steps = len(test_data)

    model.fit(train_data,
              validation_data=test_data,
              batch_size=batch_size,
              epochs=epochs,
              steps_per_epoch=steps_per_epoch,
              validation_steps=validation_steps,
              verbose=2)

    return model